#include <bits/stdc++.h>
using namespace std;
class TrieNode
{
public:
    unordered_map<char, TrieNode *> M;
};
void insert(TrieNode *&head, string s)
{
    TrieNode *temp = head;
    for (int i = 0; i < s.length(); i++)
    {
        char c = s[i];
        // Add a new node if not present already
        if (temp->M.find(c) == temp->M.end())
            temp->M[c] = new TrieNode();
        
        // Move to next node
        temp = temp->M[c];
    }
}
bool search(TrieNode *head, string pattern)
{
    TrieNode *temp = head;
    for (int i = 0; i < pattern.length(); i++)
    {
        char c = pattern[i];
        // If node for the charactor is not present this means the pattern is note present in the text
        if (temp->M.find(c) == temp->M.end())
            return false;
        temp = temp->M[c];
    }
    
    return true;
}
int main()
{
    string s = “prepinsta”;
    string pattern = “repin”, pattern2 = “repinx”;
    string suffix;
    TrieNode *head = new TrieNode();
    for (int i = s.length() – 1; i >= 0; i–)
    {
        suffix = s[i] + suffix;
        insert(head, suffix);
        cout << “Inserting Suffix “ << suffix << ” in the trie” << endl;
    }
    if (search(head, pattern))
        cout << “Found “ << pattern << endl;
    if (!search(head, pattern2))
        cout << “Not Found “ << pattern2 << endl;
    return 0;
}